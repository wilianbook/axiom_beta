// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AXIOMDAEMON_H_
#define FLATBUFFERS_GENERATED_AXIOMDAEMON_H_

#include "flatbuffers/flatbuffers.h"

struct SettingList;

struct Setting;

enum class Mode : int8_t {
  Read = 0,
  Write = 1,
  MIN = Read,
  MAX = Write
};

inline const char **EnumNamesMode() {
  static const char *names[] = {
    "Read",
    "Write",
    nullptr
  };
  return names;
}

inline const char *EnumNameMode(Mode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMode()[index];
}

enum class ConnectionType : int8_t {
  Memory = 0,
  I2C = 1,
  UART = 2,
  SPI = 3,
  MIN = Memory,
  MAX = SPI
};

inline const char **EnumNamesConnectionType() {
  static const char *names[] = {
    "Memory",
    "I2C",
    "UART",
    "SPI",
    nullptr
  };
  return names;
}

inline const char *EnumNameConnectionType(ConnectionType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesConnectionType()[index];
}

struct SettingList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SETTINGS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Setting>> *settings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Setting>> *>(VT_SETTINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SETTINGS) &&
           verifier.Verify(settings()) &&
           verifier.VerifyVectorOfTables(settings()) &&
           verifier.EndTable();
  }
};

struct SettingListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_settings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Setting>>> settings) {
    fbb_.AddOffset(SettingList::VT_SETTINGS, settings);
  }
  SettingListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SettingListBuilder &operator=(const SettingListBuilder &);
  flatbuffers::Offset<SettingList> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<SettingList>(end);
    return o;
  }
};

inline flatbuffers::Offset<SettingList> CreateSettingList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Setting>>> settings = 0) {
  SettingListBuilder builder_(_fbb);
  builder_.add_settings(settings);
  return builder_.Finish();
}

inline flatbuffers::Offset<SettingList> CreateSettingListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Setting>> *settings = nullptr) {
  return CreateSettingList(
      _fbb,
      settings ? _fbb.CreateVector<flatbuffers::Offset<Setting>>(*settings) : 0);
}

struct Setting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MODE = 4,
    VT_DESTINATION = 6,
    VT_CONNECTIONTYPE = 8,
    VT_PAYLOAD = 10
  };
  Mode mode() const {
    return static_cast<Mode>(GetField<int8_t>(VT_MODE, 0));
  }
  const flatbuffers::String *destination() const {
    return GetPointer<const flatbuffers::String *>(VT_DESTINATION);
  }
  ConnectionType connectionType() const {
    return static_cast<ConnectionType>(GetField<int8_t>(VT_CONNECTIONTYPE, 0));
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DESTINATION) &&
           verifier.Verify(destination()) &&
           VerifyField<int8_t>(verifier, VT_CONNECTIONTYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PAYLOAD) &&
           verifier.Verify(payload()) &&
           verifier.EndTable();
  }
};

struct SettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(Mode mode) {
    fbb_.AddElement<int8_t>(Setting::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  void add_destination(flatbuffers::Offset<flatbuffers::String> destination) {
    fbb_.AddOffset(Setting::VT_DESTINATION, destination);
  }
  void add_connectionType(ConnectionType connectionType) {
    fbb_.AddElement<int8_t>(Setting::VT_CONNECTIONTYPE, static_cast<int8_t>(connectionType), 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(Setting::VT_PAYLOAD, payload);
  }
  SettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SettingBuilder &operator=(const SettingBuilder &);
  flatbuffers::Offset<Setting> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Setting>(end);
    return o;
  }
};

inline flatbuffers::Offset<Setting> CreateSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    Mode mode = Mode::Read,
    flatbuffers::Offset<flatbuffers::String> destination = 0,
    ConnectionType connectionType = ConnectionType::Memory,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  SettingBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_destination(destination);
  builder_.add_connectionType(connectionType);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<Setting> CreateSettingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Mode mode = Mode::Read,
    const char *destination = nullptr,
    ConnectionType connectionType = ConnectionType::Memory,
    const std::vector<uint8_t> *payload = nullptr) {
  return CreateSetting(
      _fbb,
      mode,
      destination ? _fbb.CreateString(destination) : 0,
      connectionType,
      payload ? _fbb.CreateVector<uint8_t>(*payload) : 0);
}

inline const SettingList *GetSettingList(const void *buf) {
  return flatbuffers::GetRoot<SettingList>(buf);
}

inline bool VerifySettingListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SettingList>(nullptr);
}

inline void FinishSettingListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SettingList> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_AXIOMDAEMON_H_
